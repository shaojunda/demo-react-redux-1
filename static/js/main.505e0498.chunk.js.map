{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","this","react_default","a","createElement","id","props","n","onClick","add1","minus1","add1IfOdd","setTimeout","Component","connect","state","dispatch","type","payload","Boolean","window","location","hostname","match","store","createStore","action","undefined","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAEMA,mLACK,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,uCACOF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,SAASJ,KAAKK,MAAMC,GADpC,UAEEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,GAAG,OAAOG,QAASP,KAAKK,MAAMG,MAAtC,MACAP,EAAAC,EAAAC,cAAA,UAAQC,GAAG,SAASG,QAASP,KAAKK,MAAMI,QAAxC,MACAR,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYG,QAASP,KAAKK,MAAMK,WAA3C,4CACAT,EAAAC,EAAAC,cAAA,UAAQC,GAAG,gBAAgBG,QACzB,WACEI,WAAW,WACTZ,EAAKM,MAAMG,QACV,OAJP,yCATQI,aAiDHC,kBA3Bf,SAAyBC,GACvB,MAAO,CACLR,EAAGQ,EAAMR,IAIb,SAA4BS,GAC1B,MAAO,CACLP,KAAM,kBAAMO,EAAS,CAAEC,KAAM,MAAOC,QAAS,KAC7CR,OAAQ,kBAAMM,EAAS,CAAEC,KAAM,QAASC,QAAS,KACjDP,UAAW,kBAAMK,EAAS,CAAEC,KAAM,YAAaC,QAAS,OAiB7CJ,CAA6Cf,GCvCxCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECcAC,EAAQC,YAxBG,SAACV,EAAOW,GACvB,QAAcC,IAAVZ,EACF,MAAO,CAAER,EAAG,GAGZ,OAAQmB,EAAOT,MACb,IAAK,MAEH,MADW,CAAEV,EAAGQ,EAAMR,EAAImB,EAAOR,SAEnC,IAAK,QAEH,MADW,CAAEX,EAAGQ,EAAMR,EAAImB,EAAOR,SAEnC,IAAK,YAMH,OALGH,EAAMR,EAAI,IAAM,EACN,CAAEA,EAAGQ,EAAMR,EAAImB,EAAOR,SAEtBH,EAGf,QACE,MAAO,CAAER,EAAG,MAMpBqB,IAASC,OACP3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUN,MAAOA,GACftB,EAAAC,EAAAC,cAAC2B,EAAD,OAEFC,SAASC,eAAe,SD2FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.505e0498.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        你点击了 <span id=\"value\">{this.props.n}</span> 次\n        <div>\n          <button id=\"add1\" onClick={this.props.add1} >+1</button>\n          <button id=\"minus1\" onClick={this.props.minus1}>-1</button>\n          <button id=\"add1IfOdd\" onClick={this.props.add1IfOdd}>如果是单数就 + 1</button>\n          <button id=\"add1After2Sec\" onClick={\n            () => {\n              setTimeout(() => {\n                this.props.add1()\n              }, 2000)\n            }}>两秒钟后 + 1</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// 返回这个组件需要获取的数据\nfunction mapStateToProps(state) {\n  return {\n    n: state.n\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    add1: () => dispatch({ type: 'add', payload: 1 }),\n    minus1: () => dispatch({ type: 'minus', payload: 1 }),\n    add1IfOdd: () => dispatch({ type: 'add1IfOdd', payload: 1 })\n  }\n}\n\n// 需要有哪些 Action ?\n// const mapDispatchToProps = {\n//   add1: () => {\n//     return { type: 'add', payload: 1 }\n//   },\n//   minus1: () => {\n//     return { type: 'minus', payload: 1 }\n//   },\n//   add1IfOdd: () => {\n//     return { type: 'add1IfOdd', payload: 1 }\n//   }\n// }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\n\nconst reducers = (state, action) => {\n  if (state === undefined) {\n    return { n: 0 }\n  } else {\n    let newState\n    switch (action.type) {\n      case 'add':\n        newState = { n: state.n + action.payload }\n        return newState\n      case 'minus':\n        newState = { n: state.n - action.payload }\n        return newState\n      case 'add1IfOdd':\n        if(state.n % 2 === 1) {\n          newState = { n: state.n + action.payload }\n        } else {\n          newState = state\n        }\n        return newState\n      default:\n        return { n: 0 }\n    }\n  }\n}\nconst store = createStore(reducers)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// render()\n// store.subscribe(render)\n\n// function onAdd1IfOdd() {\n//   if(store.getState() % 2 === 1) {\n//     store.dispatch({type: 'add', payload: 1})\n//   }\n// }\n\n// function onAdd1After2Sec() {\n//   setTimeout(() => {\n//     store.dispatch({type: 'add', payload: 1})\n//   }, 2000)\n// }\n\n// function render() {\n//   ReactDOM.render(<App value={store.getState()}\n//     onAdd1={() => store.dispatch({type: 'add', payload: 1})}\n//     onMinus1={() => store.dispatch({type: 'minus', payload: 1})}\n//     onAdd1IfOdd={onAdd1IfOdd}\n//     onAdd1After2Sec={onAdd1After2Sec}\n//     />,\n//     document.getElementById('root')\n//   );\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}